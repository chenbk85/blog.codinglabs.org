算法分析中经常遇到需要求解递推式的情况，即将递推式改写为等价的封闭形式。例如[汉诺塔问题](http://en.wikipedia.org/wiki/Tower_of_Hanoi)的时间复杂度递推形式为\\(T(n)=2T(n-1)+1 \quad (n \geq 1)\\)，可以解出封闭形式为\\(T(n)=2^n-1\\)（设初始状态\\(T(0)=0\\)）。

因为递推式求解的重要性，许多算法书籍对其有专门介绍。[Donald Knuth](http://en.wikipedia.org/wiki/Donald_Knuth)在[Concrete Mathematics](http://en.wikipedia.org/wiki/Concrete_Mathematics)一书中多个章节都涉及递推式求解方法。[算法导论](http://book.douban.com/subject/1885170/)也在第四章中专门论述的这个主题。

在这些相关论述中，主要介绍了一些启发式方法，这些方法往往需要一些特殊的技巧和灵感才能完成。

而本文将论述一种纯代数式的方法，这种方法将求解递推式转化为求解一个多项式的根和求解一组线性方程组，这样就使得整个求解过程不依赖于太多技巧，因此具有更好的易用性。

本文首先会给出两个例子：如何使用纯代数方法求解斐波那契数列和汉诺塔递推式；然后会借助线性代数论述这种方法背后的数学意义，说明线性递推式与线性方程的内在联系以及这种解法的数学原理；最后将例子中的方法推广到一般情况。

# 示例
## 例1：斐波那契数列
[斐波那契数列](http://en.wikipedia.org/wiki/Fibonacci_number)大家应该很熟悉了，这里不再赘述，直接进入问题。

### 问题
设斐波那契数列为由如下递推式定义的数列：

\\(T(0)=0\\)

\\(T(1)=1\\)

\\(T(n)=T(n-2)+T(n-1) \quad (n \geq 2)\\)

求解\\(T(n)\\)的封闭形式（也就是斐波那契数列的通项公式）。

### 求解
首先忽略初始条件，考虑递推式\\(T(n)=T(n-2)+T(n-1)\\)。可以对解的形式进行一个猜测\\(T(n)=q^n\\)（这个不是瞎猜的，实际上可以证明线性递推式都遵循这种形式）。那么，递推式可以重写为：

\\(\begin{array}{l l}
            & T(n)=T(n-2)+T(n-1) \\\\
\Rightarrow & q^n=q^(n-2)+q^(n-1) \\\\
\Rightarrow & q^2=1+q \\\\
\Rightarrow & q^2-q-1=0
\end{array}\\)

这样问题被转化为一个一元二次方程的求根问题。利用求根公式可得：

\\(q=\frac{1 \pm \sqrt{5}}{2}\\)

因此得到递推式的一个通解：

\\(T(n)=c\_1(\frac{1+\sqrt{5}}{2})^n+c\_2(\frac{1-\sqrt{5}}{2})^n\\)

即其中\\(c\_1\\)和\\(c\_2\\)为任意实数。下一步要代入初始条件解出\\(c\_1\\)和\\(c\_2\\)。根据n为0和1时的初始条件，可得：

\\(\left\\{
\begin{array}{l l l}
c\_1+c\_2 & = & 0 \\\\
c\_1(\frac{1+\sqrt{5}}{2})+c\_2(\frac{1-\sqrt{5}}{2}) & = & 1
\end{array}
\right.\\)

## 例2：汉诺塔

### 问题

### 求解
